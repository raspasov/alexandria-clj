(ns ss.cljs.reanimated
  (:refer-clojure :exclude [cond and max min concat divide = not= not < <= + - * / or set])
  (:require [react-native-reanimated :as -rnr]
            [ss.react.core :as r]))

(def ^js/Object rnr -rnr)

(def event (.-event rnr))
(def cond (.-cond rnr))
(def and (.-and rnr))
(def or (.-or rnr))
(def = (.-eq rnr))
(def not= (.-neq rnr))
(def + (.-add rnr))
(def - (.-sub rnr))
(def * (.-multiply rnr))
(def / (.-divide rnr))
(def pow (.-pow rnr))
(def modulo (.-modulo rnr))
(def sqrt (.-sqrt rnr))
(def sin (.-sin rnr))
(def cos (.-cos rnr))
(def exp (.-exp rnr))
(def round (.-round rnr))
(def floor (.-floor rnr))
(def ceil (.-ceil rnr))
(def < (.-lessThan rnr))
(def <= (.-lessOrEq rnr))
(def defined (.-defined rnr))
(def not (.-not rnr))
(def min (.-min rnr))
(def max (.-max rnr))
(def acc (.-acc rnr))
(def diffClamp (.-diffClamp rnr))
(def color (.-color rnr))
(def concat (.-concat rnr))
(def onChange (.-onChange rnr))
(def debug (.-debug rnr))


(def abs (.-abs rnr))
(def diff (.-diff rnr))
(def set (.-set rnr))
(def call (.-call rnr))
(def interpolate (.-interpolate rnr))
(def Extrapolate (.-Extrapolate rnr))
(def block (.-block rnr))

(def Value (.-Value rnr))
(def Clock (.-Clock rnr))
(def stopClock (.-stopClock rnr))
(def startClock (.-startClock rnr))
(def clockRunning (.-clockRunning rnr))

;Animations
(def decay (.-decay rnr))
(def timing (.-timing rnr))
(def spring (.-spring rnr))


(def view (partial r/create-element-js (.-View rnr)))
(def code-view (partial r/create-element-js (.-Code rnr)))
